border.col='#63B8FF',
palette=c("#FFFFFF00", "#1C86EE00"),
range=c(20, 100000),
title='the number of different crime',
)
library(dplyr)
library(stringr)
mydata<-read.csv('NYPD_Complaint_Data_Current__Year_To_Date_.csv')
ddf2<-select(mydata,Offense.Description___CrimeDescription)
ddf3<-count(group_by(ddf2,Offense.Description___CrimeDescription))
offense <- sapply(str_split(ddf3$Offense.Description___CrimeDescription, "___"),'[',1)
crime<- sapply(str_split(ddf3$Offense.Description___CrimeDescription,"___"),'[',2)
ddf3$crime = crime
ddf3$offense = offense
library(treemap)
treemap(
ddf3,
index=c("offense", 'crime'),
vSize="n",
border.col='#63B8FF',
range=c(20, 100000),
title='the number of different crime',
)
library(dplyr)
library(stringr)
mydata<-read.csv('NYPD_Complaint_Data_Current__Year_To_Date_xhz.csv')
ddf2<-select(mydata,Offense.Description___CrimeDescription)
ddf3<-count(group_by(ddf2,Offense.Description___CrimeDescription))
offense <- sapply(str_split(ddf3$Offense.Description___CrimeDescription, "___"),'[',1)
crime<- sapply(str_split(ddf3$Offense.Description___CrimeDescription,"___"),'[',2)
ddf3$crime = crime
ddf3$offense = offense
library(treemap)
treemap(
ddf3,
index=c("offense", 'crime'),
vSize="n",
border.col='#63B8FF',
range=c(20, 100000),
title='the number of different crime',
)
library(lubridate)
mydata$hour<-hour(mydata$TimeOfOccurence)
mydata<-read.csv('NYPD_Complaint_Data_Current__Year_To_Date_xhz.csv')
ddf2<-select(mydata,Offense.Description___CrimeDescription)
View(mydata)
mydata<-read.csv('NYPD_Complaint_Data_Current__Year_To_Date_xhz.csv')
ddf2<-select(mydata,Offense.Description___CrimeDescription)
library(dplyr)
mydata<-read.csv('NYPD_Complaint_Data_Current__Year_To_Date_xhz.csv')
ddf2<-select(mydata,Offense.Description___CrimeDescription)
View(ddf2)
View(ddf2)
library(dplyr)
library(stringr)
mydata<-read.csv('NYPD_Complaint_Data_Current__Year_To_Date_xhz.csv')
ddf2<-select(mydata,Offense.Description___CrimeDescription)
ddf2<-count(group_by(ddf2, Offense.Description___CrimeDescription))
ddf2$offense <- sapply(str_split(ddf2$Offense.Description___CrimeDescription,"___"),'[',1)
ddf2$crime <- sapply(str_split(ddf2$Offense.Description___CrimeDescription,"___"),'[',2)
View(ddf2)
library(dplyr)
library(stringr)
mydata<-read.csv('NYPD_Complaint_Data_Current__Year_To_Date_xhz.csv')
ddf2<-select(mydata,Offense.Description___CrimeDescription)
ddf2<-count(group_by(ddf2, Offense.Description___CrimeDescription))
ddf2$offense <- sapply(str_split(ddf2$Offense.Description___CrimeDescription,"___"),'[',1)
ddf2$crime <- sapply(str_split(ddf2$Offense.Description___CrimeDescription,"___"),'[',2)
treemap(data, index=c("offense","crime"), vSize="n", type="index", title='number of the crime')
library(dplyr)
library(stringr)
library(treemap)
mydata<-read.csv('NYPD_Complaint_Data_Current__Year_To_Date_xhz.csv')
ddf2<-select(mydata,Offense.Description___CrimeDescription)
ddf2<-count(group_by(ddf2, Offense.Description___CrimeDescription))
ddf2$offense <- sapply(str_split(ddf2$Offense.Description___CrimeDescription,"___"),'[',1)
ddf2$crime <- sapply(str_split(ddf2$Offense.Description___CrimeDescription,"___"),'[',2)
treemap(data, index=c("offense","crime"), vSize="n", type="index", title='number of the crime')
library(dplyr)
library(stringr)
library(treemap)
mydata<-read.csv('NYPD_Complaint_Data_Current__Year_To_Date_xhz.csv')
ddf2<-select(mydata,Offense.Description___CrimeDescription)
ddf2<-count(group_by(ddf2, Offense.Description___CrimeDescription))
ddf2$offense <- sapply(str_split(ddf2$Offense.Description___CrimeDescription,"___"),'[',1)
ddf2$crime <- sapply(str_split(ddf2$Offense.Description___CrimeDescription,"___"),'[',2)
treemap(ddf2, index=c("offense","crime"), vSize="n", type="index", title='number of the crime')
library(lubridate)
mydata$hour<-hour(mydata$TimeOfOccurence)
library(lubridate)
na.omit(mydata)
mydata$hour<-hour(mydata$TimeOfOccurence)
library(lubridate)
as.character(mydata$TimeOfOccurence)
mydata$hour<-hour(mydata$TimeOfOccurence)
library(lubridate)
as.numeric(mydata$TimeOfOccurence)
mydata$hour<-hour(mydata$TimeOfOccurence)
library(lubridate)
as.character.Date(mydata$TimeOfOccurence)
mydata$hour<-hour(mydata$TimeOfOccurence)
library(lubridate)
madata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
library(lubridate)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
View(mydata)
library(lubridate)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
View(ddf3)
library(ggplot2)
library(dplyr)
# USe ggplot function to plot
# Using only ggplot function will create a blank canvas
ggplot(mpg)
# Provide aesthetics to blank canvas
ggplot(mpg, aes(x=cty,y=hwy))
# Generate canvas + add axis + plot data
ggplot(mpg, aes(x=cty,y=hwy))+geom_point()
# Map additional dimension to aesthetics. In this case color
ggplot(mpg, aes(x=cty,y=hwy, color=class))+geom_point()
# Map dimension as shape
ggplot(mpg, aes(x=cty,y=hwy, shape=drv))+geom_point()
# Map dimension as size
ggplot(mpg, aes(x=cty,y=hwy, size=displ))+geom_point()
# Mapping multi dimensions
ggplot(mpg, aes(x=cty,y=hwy, size=displ, color=drv))+geom_point()
# Limitations of mapping according to type of variable
ggplot(mpg, aes(x=cty,y=hwy))+geom_point()
# Mapping only one variable
ggplot(mtcars, aes(x = gear)) + geom_bar()
temp<-summarise(group_by(mtcars,cyl),mean_mpg=mean(mpg))
ggplot(temp, aes(x=cyl, y=mean_mpg)) +
geom_bar(stat = "identity")
ggplot(mtcars, aes(x = cyl)) +
geom_bar() +
ggtitle("Fig. A: x-axis as a continuous variable")
ggplot(mtcars, aes(x = factor(cyl))) +
geom_bar() +
ggtitle("Fig B: x-axis as a categorical (factor) variable")
ggplot(mtcars, aes(x = as.character(cyl))) +
geom_bar() +
ggtitle("Fig C: x-axis as a categorical (factor) variable")
library(gridExtra)
# x-axis as continuous
p1 <- ggplot(mtcars, aes(x = cyl)) +
geom_bar() +
ggtitle("Fig. A: x-axis as a continuous variable")
# x-axis as categorical
p2 <- ggplot(mtcars, aes(x = factor(cyl))) +
geom_bar() +
ggtitle("Fig B: x-axis as a categorical (factor) variable")
p3 <- ggplot(mtcars, aes(x = as.character(cyl))) +
geom_bar() +
ggtitle("Fig C: x-axis as a categorical (factor) variable")
grid.arrange(p1, p2, p3, ncol = 3)
p1 <- ggplot(mtcars, aes(x = factor(cyl))) +
geom_bar(width = .5) +
ggtitle("bar width = 0.5")
p2 <- ggplot(mtcars, aes(x = factor(cyl))) +
geom_bar(width = .75) +
ggtitle("bar width = 0.75")
p3 <- ggplot(mtcars, aes(x = factor(cyl))) +
geom_bar(width = .9) +
ggtitle("bar width = 0.9")
p4 <- ggplot(mtcars, aes(x = factor(cyl))) +
geom_bar(width = .99) +
ggtitle("bar width = 0.99")
grid.arrange(p1, p2, p3, p4, ncol = 4)
ggplot(mtcars, aes(x = factor(cyl))) +
geom_bar(fill = "blue", color = "grey40", alpha = .5)
ggplot(mtcars, aes(x = row.names(mtcars), y = mpg)) +
geom_bar(stat = "identity") +
ggtitle("Fig. A: Default x-axis")
ggplot(mtcars, aes(x = row.names(mtcars), y = mpg)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5)) +
ggtitle("Fig. B: Rotated x-axis")
p1 <- ggplot(mtcars, aes(x = row.names(mtcars), mpg)) +
geom_bar(stat = "identity") +
coord_flip() +
ggtitle("Fig. A: Default rotated x-axis")
# order bars
p2 <- ggplot(mtcars, aes(x = reorder(row.names(mtcars), mpg), y = mpg)) +
geom_bar(stat = "identity") +
coord_flip() +
ggtitle("Fig. B: Rotated ordered x-axis")
grid.arrange(p1, p2, ncol = 2)
p1 <- ggplot(mtcars, aes(reorder(row.names(mtcars), mpg), mpg)) +
geom_bar(stat = "identity") +
coord_flip() +
geom_text(aes(label = mpg), nudge_y = 2)
p2 <- ggplot(mtcars, aes(reorder(row.names(mtcars), mpg), mpg)) +
geom_bar(stat = "identity") +
coord_flip() +
geom_text(aes(label = mpg), nudge_y = -2, color = "white")
grid.arrange(p1, p2, ncol = 2)
sum_cyl <- summarise(group_by(mtcars,cyl,gear,am), total = n())
p1<-ggplot(sum_cyl, aes(factor(cyl),total,fill=factor(gear) )) +geom_bar(stat="identity",position="dodge" ) +coord_flip()+ggtitle("Bar Graph for Comparison + Part to Whole")
p2<-ggplot(sum_cyl, aes(factor(cyl),total,fill=factor(gear) )) +geom_bar(stat="identity",position="dodge" ) +ggtitle("Column Graph for Comparison + Part to Whole")
grid.arrange(p1, p2,ncol = 2)
p1<-ggplot(sum_cyl, aes(factor(cyl),total,fill=factor(gear) )) +geom_bar(stat="identity") +coord_flip()+ggtitle("Bar Graph for Comparison + Part to Whole")
p2<-ggplot(sum_cyl, aes(factor(cyl),total,fill=factor(gear) )) +geom_bar(stat="identity" ) +ggtitle("Column Graph for Comparison + Part to Whole")
grid.arrange(p1, p2,ncol = 2)
library(scales)
p1<-ggplot(sum_cyl, aes(factor(cyl), total,fill=factor(gear) )) +geom_bar(stat="identity",position="fill" ) +coord_flip()+ggtitle("100 % Stacked Bar Graph for Comparison")+scale_y_continuous(labels = percent_format())
p2<-ggplot(sum_cyl, aes(factor(cyl), total, fill=factor(gear) )) +geom_bar(stat="identity",position="fill" ) +ggtitle("100 % Stacked Column Graph for Comparison")+scale_y_continuous(labels = percent_format())
grid.arrange(p1, p2,ncol = 2)
p1<-ggplot(sum_cyl, aes(factor(cyl),total,fill=factor(gear), label=total)) +geom_bar(stat="identity") +coord_flip()+ggtitle("Bar Graph for Comparison + Part to Whole")+geom_text(size = 3, position = position_stack(vjust = 0.5))
p2<-ggplot(sum_cyl,aes(factor(cyl),total,fill=factor(gear),label=total)) +geom_bar(stat="identity" ) +ggtitle("Column Graph for Comparison + Part to Whole")+geom_text(size = 3, position = position_stack(vjust = 0.5))
grid.arrange(p1, p2,ncol = 2)
df <- data.frame(dose=c("D0.5", "D1", "D2"),
len=c(4.2, 10, 29.5))
ggplot(df, aes(x=dose, y=len, color=dose)) +
geom_bar(stat="identity")
p1<-ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_boxplot()
p2<-ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_boxplot()+coord_flip()
p3<-ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_boxplot(notch=TRUE)
grid.arrange(p1, p2, p3,ncol = 3, heights=c(1,1))
ggplot(ToothGrowth, aes(x=factor(dose), y=len, fill=factor(dose))) +
geom_boxplot()
# Dont use fill+color=same variable for box plot
ggplot(ToothGrowth, aes(x=factor(dose), y=len, color=factor(dose), fill=factor(dose))) +
geom_boxplot()
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_boxplot()+stat_summary(fun.y=mean, geom="point", size=2,color="red")
ggplot(ToothGrowth, aes(x=factor(dose), y=len, fill=supp)) + geom_boxplot()
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_violin()
p1<-ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_violin()
p2<-ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_violin()+coord_flip()
grid.arrange(p1, p2,ncol = 2, heights=c(1,1))
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_violin()+geom_boxplot(width=0.1)
ggplot(ToothGrowth, aes(x=factor(dose), y=len,fill=supp)) + geom_violin()
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) + geom_dotplot(binaxis='y', stackdir='center')
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_dotplot(binaxis='y', stackdir='center',
stackratio=1.5, dotsize=1.2)
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_dotplot(binaxis='y', stackratio=1.5, dotsize=1.2)
p1<-ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_dotplot(binaxis='y', stackdir='center')+stat_summary(fun.y=mean, geom="point", shape=18,size=3, color="red")
p2<-ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_dotplot(binaxis='y', stackdir='center',
stackratio=1.5, dotsize=1.2)+stat_summary(fun.y=mean, geom="point", shape=18,size=3, color="red")
p3<-ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_dotplot(binaxis='y', stackdir='center',
stackratio=1.5, dotsize=1.2)+coord_flip()+stat_summary(fun.y=mean, geom="point", shape=18,size=3, color="red")
grid.arrange(p1, p2, p3,ncol = 3, heights=c(1,1))
ggplot(ToothGrowth, aes(x=factor(dose), y=len, fill=supp)) +
geom_dotplot(binaxis='y', stackdir='center')
# use position=dodge
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_violin()+geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
ggplot(ToothGrowth, aes(x=factor(dose), y=len, fill=supp)) +
geom_violin()+geom_dotplot(binaxis='y', stackdir='center', position="dodge")
ggplot(diamonds, aes(x = price, fill=cut))+geom_area(stat="bin")+ggtitle("Stacked Area Graph for Comparison + Part to Whole")+theme_update(text = element_text(size=16))
ggplot(diamonds, aes(x = price, fill=cut))+geom_area(stat="bin",position="fill")+ggtitle("Stacked Area Graph for Comparison + Part to Whole")+theme_update(text = element_text(size=16))
ggplot(diamonds, aes(x = price, fill=cut))+geom_area(stat="bin",position="fill")+scale_y_continuous(labels = percent_format())+ggtitle("Stacked Area Graph for Comparison + Part to Whole")+theme_update(text = element_text(size=16))
# Simple Pie Chart
slices <- c(10, 12,4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie(slices, labels = lbls, main="Pie Chart of Countries")
slices <- c(10, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, main="Pie Chart of Countries")
ggplot(data = diamonds, mapping = aes(x = cut, fill = cut)) +
geom_bar(width = 1) + coord_polar(theta = "x")+theme_update(text = element_text(size=16))
ggplot(data = diamonds, mapping = aes(x = cut, y=..prop.., fill = cut)) +
geom_bar(width = 1) + coord_polar(theta = "x")+theme_update(text = element_text(size=16))
avg_mpg <- summarise(group_by(mpg,cyl,drv),displ = mean(displ, na.rm = TRUE))
ggplot(avg_mpg, aes(x=factor(cyl), y=factor(drv), fill=displ)) + geom_tile()
ggplot(mpg, aes(x = cty)) +
geom_histogram()+theme_classic()+theme_update(text = element_text(size=16))
ggplot(mpg, aes(x = cty)) +
geom_histogram(binwidth = 1, color = "grey30", fill = "white")+theme_bw()+theme_update(text = element_text(size=16))
ggplot(mpg, aes(x = cty)) +
geom_histogram(binwidth = 1, color = "grey30", fill = "white")+geom_vline(xintercept = mean(mpg$cty), color = "red", linetype = "dashed", size=2)+theme_bw()+theme_update(text = element_text(size=16))
temp<-select(mpg, manufacturer, cty)
temp<-filter(temp, manufacturer=="audi"|manufacturer=="dodge")
ggplot(temp, aes(x = cty, fill=manufacturer))+geom_histogram(alpha = .5) +theme_update(text = element_text(size=16))
temp<-select(mpg, manufacturer, cty)
temp<-filter(temp, manufacturer=="audi"|manufacturer=="dodge")
compare_mean<-summarise(group_by(temp,manufacturer),Mean=mean(cty))
ggplot(temp, aes(x = cty, fill=manufacturer))+
geom_histogram()+
geom_vline(data = compare_mean, xintercept = compare_mean$Mean,color = "red", linetype = "dashed", size=2)+theme_update(text = element_text(size=16))
# Learn facet grid in depth. It is very valuable to generate multiplots
ggplot(mpg, aes(x = cty))+
geom_histogram()+ facet_grid(drv~cyl)+theme_update(text = element_text(size=16))
ggplot(mpg, aes(x = cty)) +
geom_density()+theme_classic()+theme_update(text = element_text(size=16))
ggplot(mpg, aes(x = cty)) +
geom_histogram(aes(y = ..density..), color = "grey30", fill = "white")+geom_density(alpha = .2)+theme_classic()+theme_update(text = element_text(size=16))
# Two dimension histogram
ggplot(faithful, aes(x=eruptions, y=waiting)) +
geom_point()+geom_bin2d()+theme_update(text = element_text(size=16))
p2<- ggplot(faithful, aes(x=eruptions, y=waiting)) +
geom_point()+stat_density2d()
p3<- ggplot(faithful, aes(x=eruptions, y=waiting)) +
geom_point()+stat_density2d(aes(fill = ..level..), geom="polygon")
grid.arrange(p2, p3,ncol = 2)+theme_update(text = element_text(size=16))
sample_data<-mpg
ggplot(sample_data,aes(cty,hwy))+geom_point()+theme_update(text = element_text(size=16))
ggplot(sample_data,aes(cty,hwy,color=factor(cyl),shape=factor(drv),size=displ))+geom_point()+theme_update(text = element_text(size=16))
sample_data<-mpg
cor(sample_data$cty,sample_data$hwy)
cor(sample_data$hwy,sample_data$cty)
fit1<-lm(hwy~cty,sample_data)
fit2<-lm(cty~hwy,sample_data)
summary(fit1)
summary(fit2)
ggplot(mpg, aes(x=cty, y=hwy)) +
geom_point()+ geom_smooth(method=lm, se=TRUE)+theme_update(text = element_text(size=16))
ggplot(mpg, aes(x=cty, y=hwy)) +
geom_point()+ geom_smooth()+theme_update(text = element_text(size=16))
ggplot(mpg, aes(x=cty, y=hwy, color=factor(cyl))) +
geom_point()+ geom_smooth(method=lm, se=FALSE)+theme_update(text = element_text(size=16))
ggplot(mpg, aes(x=cty, y=hwy, color=factor(cyl))) +
geom_point()+ geom_smooth(method=lm, se=FALSE,fullrange=TRUE)+theme_update(text = element_text(size=16))
library(corrplot)
M<-cor(mtcars)
head(round(M,2))
corrplot(M, method="circle")
corrplot(M, method="pie")
corrplot(M, method="color")
corrplot(M, method="number")
corrplot(M, type="upper")
corrplot(M, type="upper", order="hclust")
library(MASS)
ggplot(Animals, aes(x = body, y = brain)) + geom_point()+theme_update(text = element_text(size=16))
p1<-ggplot(Animals, aes(x = body, y = brain)) + geom_point() +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw() +theme_update(text = element_text(size=16))
p2<-ggplot(Animals, aes(x = body, y = brain)) + geom_point() +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+ annotation_logticks()  +theme_update(text = element_text(size=16))
grid.arrange(p1, p2,ncol = 2)
library(ggplot2)
library(dplyr)
library(gridExtra)
y<- sample(1:10, 100, replace=T)
x<-1:100
df<-data.frame(x,y)
ggplot(df, aes(x=x, y=y)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))
df2 <- data.frame(supp=rep(c("VC", "OJ"), each=3),
dose=rep(c("D0.5", "D1", "D2"),2),
len=c(6.8, 15, 33, 4.2, 10, 29.5))
p1<-ggplot(subset(df2,df2$supp=="VC"), aes(x=dose, y=len, group=1)) +geom_line(color="red")+ggtitle("x is categorical and y is continuous")+theme_bw()+theme_update(text = element_text(size=16))
p2<-ggplot(subset(df2,df2$supp=="OJ"), aes(x=dose, y=len,group=1)) +geom_line(color="orange")+ggtitle("x is categorical and y is continuous")+theme_bw()+theme_update(text = element_text(size=16))
grid.arrange(p1, p2,ncol = 2)
ggplot(df2, aes(x=dose, y=len, group=supp, color=supp)) +geom_line()+ggtitle("x is categorical and y is continuous")+theme_bw()+theme_update(text = element_text(size=16))
ggplot(df2, aes(x=dose, y=len, group=supp, color=supp)) +geom_line()+ geom_point()+ggtitle("x is categorical and y is continuous")+theme_bw()+theme_update(text = element_text(size=16))
ggplot(df2, aes(x=as.numeric(dose), y=len, group=supp, color=supp)) +geom_line()+ geom_point()+ggtitle("x is continuous and y is continuous")+theme_bw()+theme_update(text = element_text(size=16))
ggplot(df2, aes(x=as.numeric(dose), y=len, group=supp, color=supp)) +geom_line(size=2)+ geom_point(size=2)+ggtitle("x is continuous and y is continuous")+theme_bw()+theme_update(text = element_text(size=16))
ggplot(df2, aes(x=as.numeric(dose), y=len, group=supp, color=supp)) +geom_line()+ geom_point(size=2)+ggtitle("x is continuous and y is continuous")+theme_bw()+theme_update(text = element_text(size=16))
ggplot(df2, aes(x=as.numeric(dose), y=len, group=supp, color=supp)) +geom_line(linetype="dashed")+ geom_point(size=2)+ggtitle("x is continuous and y is continuous")+theme_bw()+theme_update(text = element_text(size=16))
ggplot(df2, aes(x=as.numeric(dose), y=len, group=supp, color=supp)) +geom_line(aes(linetype=supp))+ geom_point(size=2)+ggtitle("x is continuous and y is continuous")+theme_bw()+theme_update(text = element_text(size=16))
ggplot(df2, aes(x=as.numeric(dose), y=len, group=supp, color=supp)) +geom_line(aes(linetype=supp))+ geom_point(aes(shape=supp))+ggtitle("x is continuous and y is continuous")+theme_bw()+theme_update(text = element_text(size=16))
library(lubridate)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
ggplot(ddf3, aes(x=hour, y=n)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))
library(lubridate)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
ggplot(ddf3, aes(x=hour, y=n, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))
library(lubridate)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
order(ddf3$hour)
ggplot(ddf3, aes(x=hour, y=n, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))
library(lubridate)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
as.numeric(ddf3$hour)
order(ddf3$hour)
ggplot(ddf3, aes(x=hour, y=n, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))
library(lubridate)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
sort(ddf3$hour)
ggplot(ddf3, aes(x=hour, y=n, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))
library(lubridate)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
sort(ddf3$hour)
ggplot(ddf3, aes(x=hour, y=n, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))
library(lubridate)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
as.numeric(ddf3$hour)
sort(ddf3$hour)
ggplot(ddf3, aes(x=hour, y=n, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
arrange(ddf3$hour)
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
as.numeric(ddf3$hour)
arrange(ddf3$hour)
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
as.numeric(ddf3$hour)
arrange(ddf3,hour)
ggplot(ddf3, aes(x=hour, y=n, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
mean(as.numeric(as.character(ddf3$hour)))
arrange(ddf3,hour)
ggplot(ddf3, aes(x=hour, y=n, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
as.numeric(as.character(ddf3$hour))
arrange(ddf3,hour)
ggplot(ddf3, aes(x=hour, y=n, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
as.numeric(as.character(ddf3$hour))
order(ddf3,hour)
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
as.numeric(as.character(ddf3$hour))
order(ddf3$hour)
ggplot(ddf3, aes(x=hour, y=n, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
as.numeric(as.character(ddf3$hour))
order(ddf3$hour)
ggplot(ddf3, aes(x=hour, y=n, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))+geom_point(size=2)
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
rename(ddf3,n=numberofcrime)
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
rename(ddf3,n='numberofcrime')
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
rename(ddf3,c(n='numberofcrime'))
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
names(ddf3)<-c("hour","number")
as.numeric(as.character(ddf3$hour))
order(ddf3$hour)
ggplot(ddf3, aes(x=hour, y=n, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))+geom_point(size=2)
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
names(ddf3)<-c("hour","number")
as.numeric(as.character(ddf3$hour))
order(ddf3$hour)
ggplot(ddf3, aes(x=hour, y=number, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))+geom_point(size=2)
library(dplyr)
library(stringr)
library(treemap)
mydata<-read.csv('NYPD_Complaint_Data_Current__Year_To_Date_xhz.csv')
ddf2<-select(mydata,Offense.Description___CrimeDescription)
ddf2<-count(group_by(ddf2, Offense.Description___CrimeDescription))
ddf2$offense <- sapply(str_split(ddf2$Offense.Description___CrimeDescription,"___"),'[',1)
ddf2$crime <- sapply(str_split(ddf2$Offense.Description___CrimeDescription,"___"),'[',2)
treemap(ddf2, index=c("offense","crime"), vSize="n", type="index", title='number of the crime' )
library(dplyr)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
names(ddf3)<-c("hour","number")
as.numeric(as.character(ddf3$hour))
order(ddf3$hour)
ggplot(ddf3, aes(x=hour, y=number, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))+geom_point(size=2)
library(dplyr)
library(ggplot2)
mydata$hour <- sapply(str_split(mydata$TimeOfOccurence ,":"),'[',1)
ddf3<-count(group_by(mydata, hour))
names(ddf3)<-c("hour","number")
as.numeric(as.character(ddf3$hour))
order(ddf3$hour)
ggplot(ddf3, aes(x=hour, y=number, group=1)) +geom_line()+ggtitle("x and y are continuous variables")+theme_bw()+theme_update(text = element_text(size=16))+geom_point(size=2)
library(dplyr)
library(stringr)
library(treemap)
mydata<-read.csv('NYPD_Complaint_Data_Current__Year_To_Date_xhz.csv')
ddf2<-select(mydata,Offense.Description___CrimeDescription)
ddf2<-count(group_by(ddf2, Offense.Description___CrimeDescription))
ddf2$offense <- sapply(str_split(ddf2$Offense.Description___CrimeDescription,"___"),'[',1)
ddf2$crime <- sapply(str_split(ddf2$Offense.Description___CrimeDescription,"___"),'[',2)
treemap(ddf2, index=c("offense","crime"), vSize="n", type="index", title='number of the crime' )
